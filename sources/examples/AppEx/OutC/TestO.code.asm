	%include "PE_head.inc"
	%include "TestO.hash_init.dat.inc"
	%include "TestO.globals.inc"
	%define MAIN_ENTRY	_tmcTestO
	%include "myinc.inc"
	 ;File: .\OutC\solvemyeq.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--3:
	;//function S=solvemyeq(a,b,ep1)

	;//% S=solvemyeq(-10000,10000,1e-6)

	;//global ite;


_tmcsolvemyeq:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcsolvemyeq(int nargout, int nargin,tmsMatrix *S
	;,tmsMatrix *a,tmsMatrix *b,tmsMatrix *ep1__input__tmc	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(91);
	push	91
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax
	;tmsMatrix *ep1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-16],eax
	;tmsMatrix *y1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-20],eax
	;tmsMatrix *y2=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-24],eax
	;tmsMatrix *x1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-28],eax
	;tmsMatrix *x2=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-32],eax
	;tmsMatrix *x0=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-36],eax
	;tmsMatrix *y0=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-40],eax
	;tmsMatrix *xx=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-44],eax
	;tmsMatrix *rr=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-48],eax
	;tmsMatrix *yy=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-52],eax

	;tmcCopyMat(ep1,ep1__input__tmc);
	mov	eax, DWORD PTR [ebp+28]
	push	eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcCopyMat
	add	esp,8

	;TRY
	;
	;//statement here,line 3

	;// % Lines 4--4:
	;//ite=0;

	;tmcScalar(reg[1],0.000000000000000e+000);
	push	0x0
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(ite,reg[1]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	eax, [_ite+MY_LOAD_ADDRESS]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 4

	;// % Lines 5--7:
	;//

	;//if ep1 < eps*5

	;//    ep1=eps*5;



	;//CALL function
	;tmcReallocRegister(reg[4]);
	;tmceps(1,0, reg[4],NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	push	1
	call _tmceps
	add	esp,16

	;tmcScalar(reg[5],5.000000000000000e+000);
	push	0x40140000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[6],reg[4],reg[5]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcLt(reg[7],ep1,reg[6]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call _tmcLt
	add	esp,12

;	if(tmcIsFalse(reg[7])) goto label_3; // goto to the end of the clause if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_3

	;//CALL function
	;tmcReallocRegister(reg[8]);
	;tmceps(1,0, reg[8],NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	0
	push	1
	call _tmceps
	add	esp,16

	;tmcScalar(reg[9],5.000000000000000e+000);
	push	0x40140000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[10],reg[8],reg[9]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(ep1,reg[10]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 7

	;// % Lines 8--8:
	;//end

;	goto label_2; //branch to end IF
	jmp .label_2

.label_3: ; //end IF clause
.label_2: ; //end IF
	;//statement here,line 8

	;// % Lines 9--10:
	;//

	;//y1 = myeq( a);



	;//CALL function
	;tmcReallocRegister(reg[13]);
	;tmcmyeq(1,1, reg[13], a);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	push	1
	push	1
	call _tmcmyeq
	add	esp,16



	;tmcAssign(y1,reg[13]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 10

	;// % Lines 11--11:
	;//y2 = myeq( b);



	;//CALL function
	;tmcReallocRegister(reg[16]);
	;tmcmyeq(1,1, reg[16], b);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	push	1
	push	1
	call _tmcmyeq
	add	esp,16



	;tmcAssign(y2,reg[16]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 11

	;// % Lines 12--13:
	;//if sign(y1) == sign(y2)

	;//    S=[];



	;//CALL function
	;tmcReallocRegister(reg[19]);
	;tmcsign(1,1, reg[19], y1);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	push	1
	push	1
	call _tmcsign
	add	esp,16



	;//CALL function
	;tmcReallocRegister(reg[21]);
	;tmcsign(1,1, reg[21], y2);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	push	1
	push	1
	call _tmcsign
	add	esp,16

	;tmcEq(reg[22],reg[19],reg[21]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call _tmcEq
	add	esp,12

;	if(tmcIsFalse(reg[22])) goto label_5; // goto to the end of the clause if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_5

	;tmcCreateMatrixEmpty(reg[23]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call _tmcCreateMatrixEmpty
	add	esp,4



	;tmcAssign(S,reg[23]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 13

	;// % Lines 14--14:
	;//    return;

;	goto label_1; //branch to FUNCTION exit
	jmp .label_1

	;//statement here,line 14

	;// % Lines 15--15:
	;//end

;	goto label_4; //branch to end IF
	jmp .label_4

.label_5: ; //end IF clause
.label_4: ; //end IF
	;//statement here,line 15

	;// % Lines 16--17:
	;//

	;//x1=a;





	;tmcAssign(x1,a);
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 17

	;// % Lines 18--18:
	;//x2=b;





	;tmcAssign(x2,b);
	mov	eax, DWORD PTR [ebp+24]
	push	eax
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 18

	;// % Lines 19--21:
	;//

	;//while abs(x1-x2)  > ep1

	;//    x0 = 0.5*(x1+x2);

.label_6: ; //WHILE expression




	;tmcSub(reg[31],x1,x2);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call _tmcSub
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[32]);
	;tmcabs(1,1, reg[32], reg[31]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	push	1
	push	1
	call _tmcabs
	add	esp,16



	;tmcGt(reg[34],reg[32],ep1);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call _tmcGt
	add	esp,12

;	if(tmcIsFalse(reg[34])) goto label_8; // goto to the exit of the while if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_8

	;tmcScalar(reg[35],5.000000000000000e-001);
	push	0x3fe00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call _tmcScalar
	add	esp,12





	;tmcAdd(reg[38],x1,x2);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call _tmcAdd
	add	esp,12

	;tmcMul(reg[39],reg[35],reg[38]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(x0,reg[39]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 21

	;// % Lines 22--22:
	;//    y0 = myeq( x0  );



	;//CALL function
	;tmcReallocRegister(reg[42]);
	;tmcmyeq(1,1, reg[42], x0);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	push	1
	push	1
	call _tmcmyeq
	add	esp,16



	;tmcAssign(y0,reg[42]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 22

	;// % Lines 23--24:
	;//    if  abs(y0) <= eps 

	;//            break;



	;//CALL function
	;tmcReallocRegister(reg[45]);
	;tmcabs(1,1, reg[45], y0);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	push	1
	push	1
	call _tmcabs
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[46]);
	;tmceps(1,0, reg[46],NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	push	0
	push	1
	call _tmceps
	add	esp,16

	;tmcLe(reg[47],reg[45],reg[46]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call _tmcLe
	add	esp,12

;	if(tmcIsFalse(reg[47])) goto label_10; // goto to the end of the clause if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_10

;	goto label_8; //break to WHILE exit
	jmp .label_8

	;//statement here,line 24

	;// % Lines 25--25:
	;//    end

;	goto label_9; //branch to end IF
	jmp .label_9

.label_10: ; //end IF clause
.label_9: ; //end IF
	;//statement here,line 25

	;// % Lines 26--27:
	;//    if sign(y0) ~= sign(x0)

	;//        x2 = x0;



	;//CALL function
	;tmcReallocRegister(reg[49]);
	;tmcsign(1,1, reg[49], y0);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	push	1
	push	1
	call _tmcsign
	add	esp,16



	;//CALL function
	;tmcReallocRegister(reg[51]);
	;tmcsign(1,1, reg[51], x0);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	push	1
	push	1
	call _tmcsign
	add	esp,16

	;tmcNe(reg[52],reg[49],reg[51]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	call _tmcNe
	add	esp,12

;	if(tmcIsFalse(reg[52])) goto label_12; // goto to the end of the clause if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_12





	;tmcAssign(x2,x0);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 27

	;// % Lines 28--29:
	;//    else

	;//        x1 = x0;

;	goto label_11; //branch to end IF
	jmp .label_11

.label_12: ; //end IF clause




	;tmcAssign(x1,x0);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 29

	;// % Lines 30--30:
	;//    end

.label_13: ; //end IF clause
.label_11: ; //end IF
	;//statement here,line 30

	;// % Lines 31--31:
	;//end

.label_7: ; //end WHILE
;	goto label_6; //branch to test WHILE expression
	jmp .label_6

.label_8: ; //exit WHILE
	;//statement here,line 31

	;// % Lines 32--33:
	;//

	;//S.x0 = x0;





	;tmcGetRefByFieldHcode(pRefHelper,S,0x0eb80000);/* x0 */
	push	246939648
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,x0);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 33

	;// % Lines 34--34:
	;//S.y0 = y0;





	;tmcGetRefByFieldHcode(pRefHelper,S,0x0ed70000);/* y0 */
	push	248971264
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,y0);
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 34

	;// % Lines 35--36:
	;//

	;//xx=[1,3,4,5,6,10000];

	;tmcScalar(reg[63],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[64],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[65],4.000000000000000e+000);
	push	0x40100000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[66],5.000000000000000e+000);
	push	0x40140000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[67],6.000000000000000e+000);
	push	0x40180000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[68],1.000000000000000e+004);
	push	0x40c38800
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	call _tmcScalar
	add	esp,12

;tmcCollectColumns(reg[69],6,reg[63],reg[64],reg[65],reg[66],reg[67],reg[68]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	push	6
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	call _tmcCollectColumns
	add	esp,32

;tmcCollectRows(reg[70],1,reg[69]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(xx,reg[70]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 36

	;// % Lines 37--37:
	;//rr=roots(xx);



	;//CALL function
	;tmcReallocRegister(reg[73]);
	;tmcroots(1,1, reg[73], xx);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	push	1
	push	1
	call _tmcroots
	add	esp,16



	;tmcAssign(rr,reg[73]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 37

	;// % Lines 38--38:
	;//disp(rr);



	;//CALL function
	;tmcReallocRegister(reg[76]);
	;tmcdisp(0,1, reg[76], rr);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 38

	;// % Lines 39--39:
	;//yy=polyval(xx,rr);





	;//CALL function
	;tmcReallocRegister(reg[79]);
	;tmcpolyval(1,2, reg[79], xx, rr);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	push	2
	push	1
	call _tmcpolyval
	add	esp,20



	;tmcAssign(yy,reg[79]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 39

	;// % Lines 40--40:
	;//disp(yy);



	;//CALL function
	;tmcReallocRegister(reg[82]);
	;tmcdisp(0,1, reg[82], yy);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 40

	;// % Lines 41--42:
	;//

	;//S.rr=rr;





	;tmcGetRefByFieldHcode(pRefHelper,S,0x0e400000);/* rr */
	push	239075328
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,rr);
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 42

	;// % Lines 43--43:
	;//S.yy=yy;





	;tmcGetRefByFieldHcode(pRefHelper,S,0x0f200000);/* yy */
	push	253755392
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,yy);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 43

	;// % Lines 44--51:
	;//

	;//% Open this comment to check if SEH is supported

	;//% try 

	;//%     disp(S.oo);

	;//% catch

	;//%     S.oo='SEH supported';

	;//% end

	;//disp(S)



	;//CALL function
	;tmcReallocRegister(reg[90]);
	;tmcdisp(0,1, reg[90], S);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 51

	;// % Lines 52--53:
	;//

	;//function y=myeq(x)

.label_1: ; //end Function
	;FINALLY
	;tmcFreeLocalVar(yy);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(rr);
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(xx);
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y0);
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(x0);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(x2);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(x1);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y2);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y1);
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(ep1);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcsolvemyeq

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 53

	;// % Lines 54--54:
	;//global ite

	;//y = x.^2 .* sin (x) - x.^3 .* cos(x) + x;

	;//

	;//y = ExMex1(y , y);

	;//ite=ite+1;

	;//

	;//endfunction % for demonstration of OCTAVE syntax support

	;//

	;//

	;//

	 ;File: .\OutC\solvemyeq.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--55:
	;//function S=solvemyeq(a,b,ep1)

	;//% S=solvemyeq(-10000,10000,1e-6)

	;//global ite;

	;//ite=0;

	;//

	;//if ep1 < eps*5

	;//    ep1=eps*5;

	;//end

	;//

	;//y1 = myeq( a);

	;//y2 = myeq( b);

	;//if sign(y1) == sign(y2)

	;//    S=[];

	;//    return;

	;//end

	;//

	;//x1=a;

	;//x2=b;

	;//

	;//while abs(x1-x2)  > ep1

	;//    x0 = 0.5*(x1+x2);

	;//    y0 = myeq( x0  );

	;//    if  abs(y0) <= eps 

	;//            break;

	;//    end

	;//    if sign(y0) ~= sign(x0)

	;//        x2 = x0;

	;//    else

	;//        x1 = x0;

	;//    end

	;//end

	;//

	;//S.x0 = x0;

	;//S.y0 = y0;

	;//

	;//xx=[1,3,4,5,6,10000];

	;//rr=roots(xx);

	;//disp(rr);

	;//yy=polyval(xx,rr);

	;//disp(yy);

	;//

	;//S.rr=rr;

	;//S.yy=yy;

	;//

	;//% Open this comment to check if SEH is supported

	;//% try 

	;//%     disp(S.oo);

	;//% catch

	;//%     S.oo='SEH supported';

	;//% end

	;//disp(S)

	;//

	;//function y=myeq(x)

	;//global ite

	;//y = x.^2 .* sin (x) - x.^3 .* cos(x) + x;


_tmcmyeq:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcmyeq(int nargout, int nargin,tmsMatrix *y
	;,tmsMatrix *x	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(25);
	push	25
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax

	;TRY
	;
	;//statement here,line 55



	;tmcScalar(reg[2],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[3],x,reg[2]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call _tmcPowerScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[5]);
	;tmcsin(1,1, reg[5], x);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	push	1
	push	1
	call _tmcsin
	add	esp,16

	;tmcMulScalar(reg[6],reg[3],reg[5]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call _tmcMulScalar
	add	esp,12



	;tmcScalar(reg[8],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[9],x,reg[8]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call _tmcPowerScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[11]);
	;tmccos(1,1, reg[11], x);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	push	1
	push	1
	call _tmccos
	add	esp,16

	;tmcMulScalar(reg[12],reg[9],reg[11]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call _tmcMulScalar
	add	esp,12

	;tmcSub(reg[13],reg[6],reg[12]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call _tmcSub
	add	esp,12



	;tmcAdd(reg[15],reg[13],x);
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call _tmcAdd
	add	esp,12



	;tmcAssign(y,reg[15]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 55

	;// % Lines 56--57:
	;//

	;//y = ExMex1(y , y);





	;//CALL function
	;tmcReallocRegister(reg[19]);
	;tmcExMex1(1,2, reg[19], y, y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	push	2
	push	1
	call _tmcExMex1
	add	esp,20



	;tmcAssign(y,reg[19]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 57

	;// % Lines 58--58:
	;//ite=ite+1;



	;tmcScalar(reg[22],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcAdd(reg[23],ite,reg[22]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	eax, [_ite+MY_LOAD_ADDRESS]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call _tmcAdd
	add	esp,12



	;tmcAssign(ite,reg[23]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	eax, [_ite+MY_LOAD_ADDRESS]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 58

	;// % Lines 59--60:
	;//

	;//endfunction % for demonstration of OCTAVE syntax support

.label_1: ; //end Function
	;FINALLY
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcmyeq

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 60

	;// % Lines 61--61:
	;//

	;//

	;//

	 ;File: .\OutC\TestO.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--4:
	;//function y=TestO(x) 

	;//%addpath('D:\Data_D\HSKOST\TMC\TMC_forLibre\examples\AppSIMO\MexSRC\MexDLLS')

	;//%addpath('D:\Data_D\HSKOST\TMC\TMC_forLibre\examples\AppSIMO\MatSRC')

	;//global ite;


_tmcTestO:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcTestO(int nargout, int nargin,tmsMatrix *y
	;,tmsMatrix *x__input__tmc	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(162);
	push	162
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax
	;tmsMatrix *x=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-16],eax
	;tmsMatrix *summa=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-20],eax
	;tmsMatrix *S=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-24],eax
	;tmsMatrix *K=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-28],eax
	;tmsMatrix *a=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-32],eax
	;tmsMatrix *b=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-36],eax
	;tmsMatrix *Len=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-40],eax
	;tmsMatrix *e=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-44],eax
	;tmsMatrix *z=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-48],eax
	;tmsMatrix *k=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-52],eax
	;tmsMatrix *ep1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-56],eax

	;tmcCopyMat(x,x__input__tmc);
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcCopyMat
	add	esp,8

	;TRY
	;
	;//statement here,line 4

	;// % Lines 5--7:
	;//

	;//

	;//x=[1:100];

	;tmcScalar(reg[1],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[2],1.000000000000000e+002);
	push	0x40590000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call _tmcScalar
	add	esp,12

;	tmcCreateColonBaseLimit(reg[3],reg[1],reg[2]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call _tmcCreateColonBaseLimit
	add	esp,12

;tmcCollectColumns(reg[4],1,reg[3]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call _tmcCollectColumns
	add	esp,12

;tmcCollectRows(reg[5],1,reg[4]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(x,reg[5]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 7

	;// % Lines 8--8:
	;//summa = sum(x);



	;//CALL function
	;tmcReallocRegister(reg[8]);
	;tmcsum(1,1, reg[8], x);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	1
	push	1
	call _tmcsum
	add	esp,16



	;tmcAssign(summa,reg[8]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 8

	;// % Lines 9--9:
	;//disp(summa);



	;//CALL function
	;tmcReallocRegister(reg[11]);
	;tmcdisp(0,1, reg[11], summa);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 9

	;// % Lines 10--12:
	;//

	;//

	;//x = [1:100];

	;tmcScalar(reg[12],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[13],1.000000000000000e+002);
	push	0x40590000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call _tmcScalar
	add	esp,12

;	tmcCreateColonBaseLimit(reg[14],reg[12],reg[13]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call _tmcCreateColonBaseLimit
	add	esp,12

;tmcCollectColumns(reg[15],1,reg[14]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call _tmcCollectColumns
	add	esp,12

;tmcCollectRows(reg[16],1,reg[15]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(x,reg[16]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 12

	;// % Lines 13--13:
	;//S=cell(2,1);

	;tmcScalar(reg[18],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[19],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[20]);
	;tmccell(1,2, reg[20], reg[18], reg[19]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	push	2
	push	1
	call _tmccell
	add	esp,20



	;tmcAssign(S,reg[20]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 13

	;// % Lines 14--14:
	;//S{1}.r=x;





	;tmcScalar(reg[24],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetRefByIndexCell(pRefHelper,S,1,reg[24]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndexCell
	add	esp,16

	;tmcGetRefByFieldHcode(pRefHelper,pRefHelper,0x00720000);/* r */
	push	7471104
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,x);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 14

	;// % Lines 15--15:
	;//S{2}.r=x*2;



	;tmcScalar(reg[27],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[28],x,reg[27]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcScalar(reg[30],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetRefByIndexCell(pRefHelper,S,1,reg[30]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndexCell
	add	esp,16

	;tmcGetRefByFieldHcode(pRefHelper,pRefHelper,0x00720000);/* r */
	push	7471104
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,reg[28]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 15

	;// % Lines 16--16:
	;//S{end} = 44;

	;tmcScalar(reg[32],4.400000000000000e+001);
	push	0x40460000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcGetEnd(reg[34],S,1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call _tmcGetEnd
	add	esp,16

	;tmcGetRefByIndexCell(pRefHelper,S,1,reg[34]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndexCell
	add	esp,16

	;tmcAssign(pRefHelper,reg[32]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 16

	;// % Lines 17--17:
	;//disp(['R=',num2str(S{end-1}.r(end-1))]);

;tmcCreateString(reg[35],"R=");
	mov	eax, .LC$1+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call _tmcCreateString
	add	esp,8



	;tmcGetEnd(reg[37],S,1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call _tmcGetEnd
	add	esp,16

	;tmcScalar(reg[38],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcSub(reg[39],reg[37],reg[38]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call _tmcSub
	add	esp,12

	;tmcGetByIndexCell(reg[40],S,1,reg[39]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	call _tmcGetByIndexCell
	add	esp,16

	;tmcGetByFieldHcode(reg[42],reg[40],0x00720000);/* r */
	push	7471104
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12

	;tmcGetEnd(reg[43],reg[42],1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call _tmcGetEnd
	add	esp,12

	;tmcScalar(reg[44],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcSub(reg[45],reg[43],reg[44]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call _tmcSub
	add	esp,12

	;tmcGetByIndex(reg[46],reg[42],1,reg[45]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[47]);
	;tmcnum2str(1,1, reg[47], reg[46],NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	push	1
	push	1
	call _tmcnum2str
	add	esp,20

;tmcCollectColumns(reg[48],2,reg[35],reg[47]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	push	2
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	call _tmcCollectColumns
	add	esp,16

;tmcCollectRows(reg[49],1,reg[48]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call _tmcCollectRows
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[50]);
	;tmcdisp(0,1, reg[50], reg[49]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 17

	;// % Lines 18--18:
	;//disp(S);



	;//CALL function
	;tmcReallocRegister(reg[52]);
	;tmcdisp(0,1, reg[52], S);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 18

	;// % Lines 19--19:
	;//K=struct;

	;//CALL function
	;tmcReallocRegister(reg[53]);
	;tmcstruct(1,0, reg[53]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	push	0
	push	1
	call _tmcstruct
	add	esp,12



	;tmcAssign(K,reg[53]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 19

	;// % Lines 20--20:
	;//K.y=[1:100];

	;tmcScalar(reg[55],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[56],1.000000000000000e+002);
	push	0x40590000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	call _tmcScalar
	add	esp,12

;	tmcCreateColonBaseLimit(reg[57],reg[55],reg[56]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call _tmcCreateColonBaseLimit
	add	esp,12

;tmcCollectColumns(reg[58],1,reg[57]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	call _tmcCollectColumns
	add	esp,12

;tmcCollectRows(reg[59],1,reg[58]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcGetRefByFieldHcode(pRefHelper,K,0x00790000);/* y */
	push	7929856
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByFieldHcode
	add	esp,12

	;tmcAssign(pRefHelper,reg[59]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 20

	;// % Lines 21--21:
	;//disp(K(end).y(end-3));



	;tmcGetEnd(reg[63],K,1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	call _tmcGetEnd
	add	esp,16

	;tmcGetByIndex(reg[64],K,1,reg[63]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcGetByFieldHcode(reg[66],reg[64],0x00790000);/* y */
	push	7929856
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12

	;tmcGetEnd(reg[67],reg[66],1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call _tmcGetEnd
	add	esp,12

	;tmcScalar(reg[68],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcSub(reg[69],reg[67],reg[68]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+272]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	call _tmcSub
	add	esp,12

	;tmcGetByIndex(reg[70],reg[66],1,reg[69]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[71]);
	;tmcdisp(0,1, reg[71], reg[70]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 21

	;// % Lines 22--25:
	;//

	;//

	;//

	;//a = -5;

	;tmcScalar(reg[72],5.000000000000000e+000);
	push	0x40140000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcNeg(reg[73],reg[72]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call _tmcNeg
	add	esp,8



	;tmcAssign(a,reg[73]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 25

	;// % Lines 26--26:
	;//b =  50;

	;tmcScalar(reg[75],5.000000000000000e+001);
	push	0x40490000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(b,reg[75]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 26

	;// % Lines 27--27:
	;//Len =x;





	;tmcAssign(Len,x);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 27

	;// % Lines 28--28:
	;//e = logspace( -5, -2,Len);

	;tmcScalar(reg[79],5.000000000000000e+000);
	push	0x40140000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcNeg(reg[80],reg[79]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	call _tmcNeg
	add	esp,8

	;tmcScalar(reg[81],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcNeg(reg[82],reg[81]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	call _tmcNeg
	add	esp,8



	;//CALL function
	;tmcReallocRegister(reg[84]);
	;tmclogspace(1,3, reg[84], reg[80], reg[82], Len);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	push	3
	push	1
	call _tmclogspace
	add	esp,24



	;tmcAssign(e,reg[84]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 28

	;// % Lines 29--29:
	;//e = fliplr(e);



	;//CALL function
	;tmcReallocRegister(reg[87]);
	;tmcfliplr(1,1, reg[87], e);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+348]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+348]
	push	ecx
	push	1
	push	1
	call _tmcfliplr
	add	esp,16



	;tmcAssign(e,reg[87]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+348]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 29

	;// % Lines 30--30:
	;//y = zeros(1,Len);

	;tmcScalar(reg[89],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	call _tmcScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[91]);
	;tmczeros(1,2, reg[91], reg[89], Len);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+364]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+364]
	push	ecx
	push	2
	push	1
	call _tmczeros
	add	esp,20



	;tmcAssign(y,reg[91]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+364]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 30

	;// % Lines 31--31:
	;//x=y;





	;tmcAssign(x,y);
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 31

	;// % Lines 32--32:
	;//z=y;





	;tmcAssign(z,y);
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 32

	;// % Lines 33--34:
	;//for k=1:length(e)

	;//    ep1  = e(k);

	;tmcScalar(reg[97],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	call _tmcScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[99]);
	;tmclength(1,1, reg[99], e);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	push	1
	push	1
	call _tmclength
	add	esp,16

;	tmcCreateColonBaseLimit(reg[100],reg[97],reg[99]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+400]
	push	ecx
	call _tmcCreateColonBaseLimit
	add	esp,12

	;tmcForIterInit(reg[101],reg[100],k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+400]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	call _tmcForIterInit
	add	esp,12

.label_4: ; //FOR begin
;	if(tmcForIterNext(reg[101],reg[100])) goto label_3; // exit for
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+400]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	call _tmcForIterNext
	add	esp,8
	movsx	 edx,ax
	test	edx, edx
	jne .label_3





	;tmcGetByIndex(reg[104],e,1,k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcAssign(ep1,reg[104]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 34

	;// % Lines 35--35:
	;//    S=solvemyeq(a,b,ep1);







	;//CALL function
	;tmcReallocRegister(reg[109]);
	;tmcsolvemyeq(1,3, reg[109], a, b, ep1);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	push	3
	push	1
	call _tmcsolvemyeq
	add	esp,24



	;tmcAssign(S,reg[109]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 35

	;// % Lines 36--37:
	;//    if ~isempty(S)

	;//        y(k) = S.y0; x(k) = S.x0;



	;//CALL function
	;tmcReallocRegister(reg[112]);
	;tmcisempty(1,1, reg[112], S);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+448]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+448]
	push	ecx
	push	1
	push	1
	call _tmcisempty
	add	esp,16

	;tmcNot(reg[113],reg[112]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+448]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+452]
	push	ecx
	call _tmcNot
	add	esp,8

;	if(tmcIsFalse(reg[113])) goto label_6; // goto to the end of the clause if the expression is false
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+452]
	push	ecx
	call _tmcIsFalse
	add	esp,4
	movsx	 edx,ax
	test	edx, edx
	jne .label_6



	;tmcGetByFieldHcode(reg[116],S,0x0ed70000);/* y0 */
	push	248971264
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+464]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12





	;tmcGetRefByIndex(pRefHelper,y,1,k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndex
	add	esp,16

	;tmcAssign(pRefHelper,reg[116]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+464]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 37



	;tmcGetByFieldHcode(reg[121],S,0x0eb80000);/* x0 */
	push	246939648
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+484]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12





	;tmcGetRefByIndex(pRefHelper,x,1,k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndex
	add	esp,16

	;tmcAssign(pRefHelper,reg[121]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+484]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 37

	;// % Lines 38--38:
	;//        z(k) = ite;







	;tmcGetRefByIndex(pRefHelper,z,1,k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndex
	add	esp,16

	;tmcAssign(pRefHelper,ite);
	mov	eax, [_ite+MY_LOAD_ADDRESS]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 38

	;// % Lines 39--39:
	;//    end

;	goto label_5; //branch to end IF
	jmp .label_5

.label_6: ; //end IF clause
.label_5: ; //end IF
	;//statement here,line 39

	;// % Lines 40--40:
	;//end

.label_2: ; //FOR end
;	goto label_4; //branch to FOR begin
	jmp .label_4

.label_3: ; //FOR exit
	;//statement here,line 40

	;// % Lines 41--41:
	;//save('res.mat','y','x','z');

;tmcCreateString(reg[127],"res.mat");
	mov	eax, .LC$2+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+508]
	push	ecx
	call _tmcCreateString
	add	esp,8

;	//CALL function save
;	tmcsave(0,4, reg[127], y, "y", x, "x", z, "z");
	mov	eax, .LC$5+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, .LC$4+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, .LC$3+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+508]
	push	ecx
	push	4
	push	0
	call _tmcsave
	add	esp,36

	;//statement here,line 41

	;// % Lines 42--45:
	;//%fp=fopen('res.txt');

	;//%fprintf(fp,'done Ok');

	;//%fclose(fp);

	;//return;

;	goto label_1; //branch to FUNCTION exit
	jmp .label_1

	;//statement here,line 45

	;// % Lines 46--47:
	;//

	;//figure(10);

	;tmcScalar(reg[128],1.000000000000000e+001);
	push	0x40240000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+512]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[129]);
	;tmcfigure(0,1, reg[129], reg[128]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+516]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+512]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+516]
	push	ecx
	push	1
	push	0
	call _tmcfigure
	add	esp,16

	;//statement here,line 47

	;// % Lines 48--48:
	;//subplot(3,1,1);

	;tmcScalar(reg[130],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+520]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[131],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+524]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[132],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[133]);
	;tmcsubplot(0,3, reg[133], reg[130], reg[131], reg[132]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+532]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+524]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+520]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+532]
	push	ecx
	push	3
	push	0
	call _tmcsubplot
	add	esp,24

	;//statement here,line 48

	;// % Lines 49--49:
	;//plot(e,y,'b');grid on;





;tmcCreateString(reg[136],"b");
	mov	eax, .LC$6+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+544]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[137]);
	;tmcplot(0,3, reg[137], e, y, reg[136]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+548]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+544]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+548]
	push	ecx
	push	3
	push	0
	call _tmcplot
	add	esp,24

	;//statement here,line 49

;tmcCreateString(reg[138],"on");
	mov	eax, .LC$7+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[139]);
	;tmcgrid(0,1, reg[139], reg[138]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+556]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+556]
	push	ecx
	push	1
	push	0
	call _tmcgrid
	add	esp,16

	;//statement here,line 49

	;// % Lines 50--50:
	;//subplot(3,1,2);

	;tmcScalar(reg[140],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[141],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[142],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+568]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[143]);
	;tmcsubplot(0,3, reg[143], reg[140], reg[141], reg[142]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+572]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+568]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+572]
	push	ecx
	push	3
	push	0
	call _tmcsubplot
	add	esp,24

	;//statement here,line 50

	;// % Lines 51--51:
	;//plot(e,x,'r');grid on;





;tmcCreateString(reg[146],"r");
	mov	eax, .LC$8+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[147]);
	;tmcplot(0,3, reg[147], e, x, reg[146]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+588]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+588]
	push	ecx
	push	3
	push	0
	call _tmcplot
	add	esp,24

	;//statement here,line 51

;tmcCreateString(reg[148],"on");
	mov	eax, .LC$9+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[149]);
	;tmcgrid(0,1, reg[149], reg[148]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+596]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+596]
	push	ecx
	push	1
	push	0
	call _tmcgrid
	add	esp,16

	;//statement here,line 51

	;// % Lines 52--52:
	;//subplot(3,1,3);

	;tmcScalar(reg[150],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+600]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[151],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+604]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[152],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+608]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[153]);
	;tmcsubplot(0,3, reg[153], reg[150], reg[151], reg[152]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+612]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+608]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+604]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+600]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+612]
	push	ecx
	push	3
	push	0
	call _tmcsubplot
	add	esp,24

	;//statement here,line 52

	;// % Lines 53--53:
	;//plot(e,z,'g');grid on;





;tmcCreateString(reg[156],"g");
	mov	eax, .LC$10+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+624]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[157]);
	;tmcplot(0,3, reg[157], e, z, reg[156]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+628]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+624]
	push	ecx
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+628]
	push	ecx
	push	3
	push	0
	call _tmcplot
	add	esp,24

	;//statement here,line 53

;tmcCreateString(reg[158],"on");
	mov	eax, .LC$11+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+632]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[159]);
	;tmcgrid(0,1, reg[159], reg[158]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+636]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+632]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+636]
	push	ecx
	push	1
	push	0
	call _tmcgrid
	add	esp,16

	;//statement here,line 53

	;// % Lines 54--55:
	;//

	;//disp('done');

;tmcCreateString(reg[160],"done");
	mov	eax, .LC$12+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+640]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[161]);
	;tmcdisp(0,1, reg[161], reg[160]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+644]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+640]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+644]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 55

	;// % Lines 56--57:
	;//

.label_1: ; //end Function
	;FINALLY
	;tmcFreeLocalVar(ep1);
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(k);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(z);
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(e);
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Len);
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(b);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(a);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(K);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(S);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(summa);
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(x);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcTestO
.LC$1:	 DB 'R=', 0x0
.LC$2:	 DB 'res.mat', 0x0
.LC$3:	 DB 'y', 0x0
.LC$4:	 DB 'x', 0x0
.LC$5:	 DB 'z', 0x0
.LC$6:	 DB 'b', 0x0
.LC$7:	 DB 'on', 0x0
.LC$8:	 DB 'r', 0x0
.LC$9:	 DB 'on', 0x0
.LC$10:	 DB 'g', 0x0
.LC$11:	 DB 'on', 0x0
.LC$12:	 DB 'done', 0x0

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 57

	;// % Lines 58--58:
	%include "PE_tail.inc"
