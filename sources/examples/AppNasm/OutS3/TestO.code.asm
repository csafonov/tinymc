	%include "PE_head.inc"
	%include "TestO.hash_init.dat.inc"
	%include "TestO.globals.inc"
	%define MAIN_ENTRY	_tmcTestO
	%include "myinc.inc"
	 ;File: .\OutS3\TestO.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--4:
	;//function [unusedy,unusedm]=TestO(x,n)

	;//global VV

	;//

	;//p = [1 1 200 1 1 1 1 1 1 1 1 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ];


_tmcTestO:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcTestO(int nargout, int nargin,tmsMatrix *unusedy,tmsMatrix *unusedm
	;,tmsMatrix *x__input__tmc,tmsMatrix *n	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(96);
	push	96
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax
	;tmsMatrix *x=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-16],eax
	;tmsMatrix *p=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-20],eax
	;tmsMatrix *y=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-24],eax
	;tmsMatrix *y_a=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-28],eax
	;tmsMatrix *I=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-32],eax
	;tmsMatrix *y_r=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-36],eax
	;tmsMatrix *y_i=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-40],eax
	;tmsMatrix *d=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-44],eax
	;tmsMatrix *tht=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-48],eax
	;tmsMatrix *AbsOffsetCorr=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-52],eax
	;tmsMatrix *AdvUsecCorr=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-56],eax
	;tmsMatrix *str=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-60],eax

	;tmcCopyMat(x,x__input__tmc);
	mov	eax, DWORD PTR [ebp+24]
	push	eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcCopyMat
	add	esp,8

	;TRY
	;
	;//statement here,line 4

	;tmcScalar(reg[1],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[2],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[3],2.000000000000000e+002);
	push	0x40690000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[4],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[5],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[6],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[7],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[8],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[9],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[10],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[11],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[12],1.000000000000000e+001);
	push	0x40240000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[13],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[14],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[15],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[16],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[17],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[18],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[19],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[20],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[21],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[22],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[23],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[24],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[25],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[26],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call _tmcScalar
	add	esp,12

;tmcCollectColumns(reg[27],26,reg[1],reg[2],reg[3],reg[4],reg[5],reg[6],reg[7],reg[8]
;,reg[9],reg[10],reg[11],reg[12],reg[13],reg[14],reg[15],reg[16]
;,reg[17],reg[18],reg[19],reg[20],reg[21],reg[22],reg[23],reg[24]
;,reg[25],reg[26]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	26
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	call _tmcCollectColumns
	add	esp,112

;tmcCollectRows(reg[28],1,reg[27]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(p,reg[28]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 4

	;// % Lines 5--5:
	;//y = roots(p);



	;//CALL function
	;tmcReallocRegister(reg[31]);
	;tmcroots(1,1, reg[31], p);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	push	1
	push	1
	call _tmcroots
	add	esp,16



	;tmcAssign(y,reg[31]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 5

	;// % Lines 6--6:
	;//y_a = angle(y);



	;//CALL function
	;tmcReallocRegister(reg[34]);
	;tmcangle(1,1, reg[34], y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	push	1
	push	1
	call _tmcangle
	add	esp,16



	;tmcAssign(y_a,reg[34]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 6

	;// % Lines 7--7:
	;//[y_a,I]=sort(y_a);



	;//CALL function
	;tmcReallocRegister(reg[37]);
	;tmcReallocRegister(reg[38]);
	;tmcsort(2,1, reg[37], reg[38], y_a,NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	push	1
	push	2
	call _tmcsort
	add	esp,24



	;tmcAssign(y_a,reg[37]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcAssign
	add	esp,8



	;tmcAssign(I,reg[38]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 7

	;// % Lines 8--8:
	;//y=y(I);





	;tmcGetByIndex(reg[43],y,1,I);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcAssign(y,reg[43]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 8

	;// % Lines 9--10:
	;//

	;//y =y ;%.* exp(abs(y_a) - abs(y_a(1)));





	;tmcAssign(y,y);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 10

	;// % Lines 11--12:
	;//

	;//y_r=real(y);



	;//CALL function
	;tmcReallocRegister(reg[48]);
	;tmcreal(1,1, reg[48], y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	push	1
	push	1
	call _tmcreal
	add	esp,16



	;tmcAssign(y_r,reg[48]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 12

	;// % Lines 13--13:
	;//y_i = imag(y);



	;//CALL function
	;tmcReallocRegister(reg[51]);
	;tmcimag(1,1, reg[51], y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	push	1
	push	1
	call _tmcimag
	add	esp,16



	;tmcAssign(y_i,reg[51]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 13

	;// % Lines 14--14:
	;// figure(500);

	;tmcScalar(reg[53],5.000000000000000e+002);
	push	0x407f4000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[54]);
	;tmcfigure(0,1, reg[54], reg[53]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	push	1
	push	0
	call _tmcfigure
	add	esp,16

	;//statement here,line 14

	;// % Lines 15--15:
	;// plot(y_r,y_i);





	;//CALL function
	;tmcReallocRegister(reg[57]);
	;tmcplot(0,2, reg[57], y_r, y_i);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	push	2
	push	0
	call _tmcplot
	add	esp,20

	;//statement here,line 15

	;// % Lines 16--22:
	;//

	;//

	;//%return;

	;//

	;//

	;//

	;//p = [1,2,3];

	;tmcScalar(reg[58],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[59],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[60],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	call _tmcScalar
	add	esp,12

;tmcCollectColumns(reg[61],3,reg[58],reg[59],reg[60]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	push	3
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+244]
	push	ecx
	call _tmcCollectColumns
	add	esp,20

;tmcCollectRows(reg[62],1,reg[61]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+244]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+248]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(p,reg[62]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+248]
	push	ecx
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 22

	;// % Lines 23--23:
	;//y = roots(p);



	;//CALL function
	;tmcReallocRegister(reg[65]);
	;tmcroots(1,1, reg[65], p);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	push	1
	push	1
	call _tmcroots
	add	esp,16



	;tmcAssign(y,reg[65]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 23

	;// % Lines 24--24:
	;//x = polyval(p,y);





	;//CALL function
	;tmcReallocRegister(reg[69]);
	;tmcpolyval(1,2, reg[69], p, y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	push	2
	push	1
	call _tmcpolyval
	add	esp,20



	;tmcAssign(x,reg[69]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+276]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 24

	;// % Lines 25--26:
	;//

	;//d=CheckVar1(p,y);





	;//CALL function
	;tmcReallocRegister(reg[73]);
	;tmcCheckVar1(1,2, reg[73], p, y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	push	2
	push	1
	call _tmcCheckVar1
	add	esp,20



	;tmcAssign(d,reg[73]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 26

	;// % Lines 27--28:
	;//

	;//disp(y);



	;//CALL function
	;tmcReallocRegister(reg[76]);
	;tmcdisp(0,1, reg[76], y);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 28

	;// % Lines 29--29:
	;//disp(x);



	;//CALL function
	;tmcReallocRegister(reg[78]);
	;tmcdisp(0,1, reg[78], x);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+312]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+312]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 29

	;// % Lines 30--30:
	;//disp(d-x);





	;tmcSub(reg[81],d,x);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	call _tmcSub
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[82]);
	;tmcdisp(0,1, reg[82], reg[81]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+328]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 30

	;// % Lines 31--32:
	;//

	;//[tht,AbsOffsetCorr,AdvUsecCorr] =btlCalcCommut;

	;//CALL function
	;tmcReallocRegister(reg[83]);
	;tmcReallocRegister(reg[84]);
	;tmcReallocRegister(reg[85]);
	;tmcbtlCalcCommut(3,0, reg[83], reg[84], reg[85]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+340]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+340]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	push	0
	push	3
	call _tmcbtlCalcCommut
	add	esp,20



	;tmcAssign(tht,reg[83]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcAssign
	add	esp,8



	;tmcAssign(AbsOffsetCorr,reg[84]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcAssign
	add	esp,8



	;tmcAssign(AdvUsecCorr,reg[85]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+340]
	push	ecx
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 32

	;// % Lines 33--35:
	;//% disp(AbsOffsetCorr);

	;//% disp(AdvUsecCorr);

	;//str=sprintf('correction to AbsOffset=%d, AdvUsec=%d',AbsOffsetCorr,AdvUsecCorr);

;tmcCreateString(reg[89],"correction to AbsOffset=%d, AdvUsec=%d");
	mov	eax, .LC$1+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	call _tmcCreateString
	add	esp,8





	;//CALL function
	;tmcReallocRegister(reg[92]);
	;tmcsprintf(1,3, reg[92], reg[89], AbsOffsetCorr, AdvUsecCorr);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+356]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	push	3
	push	1
	call _tmcsprintf
	add	esp,24



	;tmcAssign(str,reg[92]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 35

	;// % Lines 36--36:
	;//disp(str);



	;//CALL function
	;tmcReallocRegister(reg[95]);
	;tmcdisp(0,1, reg[95], str);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+380]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+380]
	push	ecx
	push	1
	push	0
	call _tmcdisp
	add	esp,16

	;//statement here,line 36

	;// % Lines 37--39:
	;//

	;//

.label_1: ; //end Function
	;FINALLY
	;tmcFreeLocalVar(str);
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(AdvUsecCorr);
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(AbsOffsetCorr);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(tht);
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(d);
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y_i);
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y_r);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(I);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y_a);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(y);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(p);
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(x);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcTestO
.LC$1:	 DB 'correction to AbsOffset=%d, AdvUsec=%d', 0x0

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 39

	;// % Lines 40--40:
	 ;File: .\OutS3\btlCalcCommut.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--3:
	;//function [tht,AbsOffsetCorr,AdvUsecCorr] =btlCalcCommut

	;//

	;//JV_tests   = [750000,1000000,1500000,2000000,3000000];


_tmcbtlCalcCommut:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcbtlCalcCommut(int nargout, int nargin,tmsMatrix *tht,tmsMatrix *AbsOffsetCorr,tmsMatrix *AdvUsecCorr
	;	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(335);
	push	335
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax
	;tmsMatrix *JV_tests=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-16],eax
	;tmsMatrix *FileNames=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-20],eax
	;tmsMatrix *Thetas_min_a=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-24],eax
	;tmsMatrix *cnt=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-28],eax
	;tmsMatrix *www=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-32],eax
	;tmsMatrix *Iq_ave=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-36],eax
	;tmsMatrix *Thetas=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-40],eax
	;tmsMatrix *Y1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-44],eax
	;tmsMatrix *Y2=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-48],eax
	;tmsMatrix *I2=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-52],eax
	;tmsMatrix *lena=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-56],eax
	;tmsMatrix *Ha=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-60],eax
	;tmsMatrix *thta=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-64],eax
	;tmsMatrix *Thetas_simul=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-68],eax
	;tmsMatrix *Ha_simul=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-72],eax
	;tmsMatrix *Iq_simul=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-76],eax
	;tmsMatrix *Y=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-80],eax
	;tmsMatrix *I=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-84],eax
	;tmsMatrix *NumPoles=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-88],eax
	;tmsMatrix *BitsPerRev=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-92],eax
	;tmsMatrix *EangleCorrRes=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-96],eax
	;tmsMatrix *Thetas_min=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-100],eax
	;tmsMatrix *len=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-104],eax
	;tmsMatrix *ElecVel=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-108],eax
	;tmsMatrix *AngleElecCorr=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-112],eax
	;tmsMatrix *H=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-116],eax
	;tmsMatrix *w=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-120],eax
	;tmsMatrix *s=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-124],eax
	;tmsMatrix *w0=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-128],eax
	;tmsMatrix *w1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-132],eax
	;tmsMatrix *d0=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-136],eax
	;tmsMatrix *d1=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-140],eax
	;tmsMatrix *P=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-144],eax
	;tmsMatrix *ph=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-148],eax
	;tmsMatrix *Mag=tmcNewMatrix();
	call ___tmcNewMatrix
	mov	DWORD PTR [ebp-152],eax

	;TRY
	;
	;tmcScalar(reg[1],7.500000000000000e+005);
	push	0x4126e360
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[2],1.000000000000000e+006);
	push	0x412e8480
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[3],1.500000000000000e+006);
	push	0x4136e360
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[4],2.000000000000000e+006);
	push	0x413e8480
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[5],3.000000000000000e+006);
	push	0x4146e360
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call _tmcScalar
	add	esp,12

;tmcCollectColumns(reg[6],5,reg[1],reg[2],reg[3],reg[4],reg[5]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	5
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call _tmcCollectColumns
	add	esp,28

;tmcCollectRows(reg[7],1,reg[6]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(JV_tests,reg[7]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 3

	;// % Lines 4--10:
	;//

	;//FileNames={'BtlMotor1_comm_jv750000_13p6V.mat', ...

	;//'BtlMotor1_comm_jv1000000_13p6V.mat',  ...                        

	;//'BtlMotor1_comm_jv1500000_13p6V.mat' ,  ...                                          

	;//'BtlMotor1_comm_jv2000000_13p6V.mat' ,  ...                 

	;//'BtlMotor1_comm_jv3000000_6p9V.mat'  ,  ...                   

	;//};

;tmcCreateString(reg[9],"BtlMotor1_comm_jv750000_13p6V.mat");
	mov	eax, .LC$1+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call _tmcCreateString
	add	esp,8

;tmcCreateString(reg[10],"BtlMotor1_comm_jv1000000_13p6V.mat");
	mov	eax, .LC$2+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call _tmcCreateString
	add	esp,8

;tmcCreateString(reg[11],"BtlMotor1_comm_jv1500000_13p6V.mat");
	mov	eax, .LC$3+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call _tmcCreateString
	add	esp,8

;tmcCreateString(reg[12],"BtlMotor1_comm_jv2000000_13p6V.mat");
	mov	eax, .LC$4+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call _tmcCreateString
	add	esp,8

;tmcCreateString(reg[13],"BtlMotor1_comm_jv3000000_6p9V.mat");
	mov	eax, .LC$5+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call _tmcCreateString
	add	esp,8

;tmcCollectCellColumns(reg[14],5,reg[9],reg[10],reg[11],reg[12],reg[13]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	push	5
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call _tmcCollectCellColumns
	add	esp,28

;tmcCollectCellRows(reg[15],1,reg[14]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call _tmcCollectCellRows
	add	esp,12



	;tmcAssign(FileNames,reg[15]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 10

	;// % Lines 11--11:
	;//Thetas_min_a=[];

	;tmcCreateMatrixEmpty(reg[17]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call _tmcCreateMatrixEmpty
	add	esp,4



	;tmcAssign(Thetas_min_a,reg[17]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 11

	;// % Lines 12--13:
	;//for cnt=1:length(JV_tests)

	;//        www= load(FileNames{cnt});

	;tmcScalar(reg[19],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call _tmcScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[21]);
	;tmclength(1,1, reg[21], JV_tests);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	push	1
	push	1
	call _tmclength
	add	esp,16

;	tmcCreateColonBaseLimit(reg[22],reg[19],reg[21]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call _tmcCreateColonBaseLimit
	add	esp,12

	;tmcForIterInit(reg[23],reg[22],cnt);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call _tmcForIterInit
	add	esp,12

.label_4: ; //FOR begin
;	if(tmcForIterNext(reg[23],reg[22])) goto label_3; // exit for
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call _tmcForIterNext
	add	esp,8
	movsx	 edx,ax
	test	edx, edx
	jne .label_3





	;tmcGetByIndexCell(reg[26],FileNames,1,cnt);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call _tmcGetByIndexCell
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[27]);
	;tmcload(1,1, reg[27], reg[26]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	push	1
	push	1
	call _tmcload
	add	esp,16



	;tmcAssign(www,reg[27]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 13

	;// % Lines 14--14:
	;//        Iq_ave =   www.Iq_ave;



	;tmcGetByFieldHcode(reg[31],www,0xcf590000);/* Iq_ave */
	push	-816250880
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12



	;tmcAssign(Iq_ave,reg[31]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 14

	;// % Lines 15--15:
	;//        Thetas = www.Thetas;



	;tmcGetByFieldHcode(reg[35],www,0x49b50000);/* Thetas */
	push	1236598784
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call _tmcGetByFieldHcode
	add	esp,12



	;tmcAssign(Thetas,reg[35]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 15

	;// % Lines 16--17:
	;//        

	;//        Y1=min(Iq_ave);



	;//CALL function
	;tmcReallocRegister(reg[38]);
	;tmcReallocRegister(reg[39]);
	;tmcmin(1,1, reg[38], reg[39], Iq_ave,NULL,NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	push	0
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	push	1
	push	1
	call _tmcmin
	add	esp,28



	;tmcAssign(Y1,reg[38]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 17

	;// % Lines 18--18:
	;//        Y2=max(Iq_ave);



	;//CALL function
	;tmcReallocRegister(reg[42]);
	;tmcReallocRegister(reg[43]);
	;tmcmax(1,1, reg[42], reg[43], Iq_ave,NULL,NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	push	0
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	push	1
	push	1
	call _tmcmax
	add	esp,28



	;tmcAssign(Y2,reg[42]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+168]
	push	ecx
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 18

	;// % Lines 19--19:
	;//        [I2] =find( Iq_ave < (Y1 + 0.5*( Y2-Y1  )   )  );





	;tmcScalar(reg[47],5.000000000000000e-001);
	push	0x3fe00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	call _tmcScalar
	add	esp,12





	;tmcSub(reg[50],Y2,Y1);
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	call _tmcSub
	add	esp,12

	;tmcMul(reg[51],reg[47],reg[50]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcAdd(reg[52],Y1,reg[51]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	call _tmcAdd
	add	esp,12

	;tmcLt(reg[53],Iq_ave,reg[52]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	call _tmcLt
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[54]);
	;tmcReallocRegister(reg[55]);
	;tmcReallocRegister(reg[56]);
	;tmcfind(1,1, reg[54], reg[55], reg[56], reg[53],NULL,NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+220]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	push	1
	push	1
	call _tmcfind
	add	esp,32



	;tmcAssign(I2,reg[54]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+216]
	push	ecx
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 19

	;// % Lines 20--20:
	;//        Iq_ave=Iq_ave(I2);





	;tmcGetByIndex(reg[60],Iq_ave,1,I2);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcAssign(Iq_ave,reg[60]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 20

	;// % Lines 21--21:
	;//        Thetas=Thetas(I2);





	;tmcGetByIndex(reg[64],Thetas,1,I2);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcAssign(Thetas,reg[64]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+256]
	push	ecx
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 21

	;// % Lines 22--24:
	;//

	;//        

	;//        lena = length(Iq_ave);



	;//CALL function
	;tmcReallocRegister(reg[67]);
	;tmclength(1,1, reg[67], Iq_ave);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	push	1
	push	1
	call _tmclength
	add	esp,16



	;tmcAssign(lena,reg[67]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+268]
	push	ecx
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 24

	;// % Lines 25--26:
	;//        

	;//        Ha = [Thetas(:).^2, Thetas(:), ones(lena,1)];



	;tmcCreateMagicColon(reg[70]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[71],Thetas,1,reg[70]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcScalar(reg[72],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[73],reg[71],reg[72]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+288]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call _tmcPowerScalar
	add	esp,12



	;tmcCreateMagicColon(reg[75]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[76],Thetas,1,reg[75]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcScalar(reg[78],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+312]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[79]);
	;tmcones(1,2, reg[79], lena, reg[78]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+312]
	push	ecx
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	push	2
	push	1
	call _tmcones
	add	esp,20

;tmcCollectColumns(reg[80],3,reg[73],reg[76],reg[79]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	push	3
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	call _tmcCollectColumns
	add	esp,20

;tmcCollectRows(reg[81],1,reg[80]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(Ha,reg[81]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 26

	;// % Lines 27--27:
	;//        thta = (Ha'*Ha)\(Ha'*Iq_ave(:)); % Iq_ave = Thetas^2*thta(1) + Thetas*thta(2)+thta(3)



	;tmcTranspose(reg[84],Ha);
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	call _tmcTranspose
	add	esp,8



	;tmcMul(reg[86],reg[84],Ha);
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+344]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcTranspose(reg[88],Ha);
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+352]
	push	ecx
	call _tmcTranspose
	add	esp,8



	;tmcCreateMagicColon(reg[90]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[91],Iq_ave,1,reg[90]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+360]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+364]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcMul(reg[92],reg[88],reg[91]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+364]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+352]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcLeftDiv(reg[93],reg[86],reg[92]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+344]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+372]
	push	ecx
	call _tmcLeftDiv
	add	esp,12



	;tmcAssign(thta,reg[93]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+372]
	push	ecx
	mov	eax, DWORD PTR [ebp+-64]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 27

	;// % Lines 28--29:
	;//    

	;//    Thetas_simul = [Thetas(1):1:Thetas(end)];  



	;tmcScalar(reg[96],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+384]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetByIndex(reg[97],Thetas,1,reg[96]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+384]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcGetEnd(reg[99],Thetas,1,1);
	push	1
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	call _tmcGetEnd
	add	esp,16

	;tmcGetByIndex(reg[100],Thetas,1,reg[99]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+396]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+400]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcScalar(reg[101],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	call _tmcScalar
	add	esp,12

;	tmcCreateColonBaseIncLimit(reg[102],reg[97],reg[101],reg[100]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+400]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+388]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+408]
	push	ecx
	call _tmcCreateColonBaseIncLimit
	add	esp,16

;tmcCollectColumns(reg[103],1,reg[102]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+408]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+412]
	push	ecx
	call _tmcCollectColumns
	add	esp,12

;tmcCollectRows(reg[104],1,reg[103]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+412]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(Thetas_simul,reg[104]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 29

	;// % Lines 30--30:
	;//    Ha_simul = [Thetas_simul(:).^2, Thetas_simul(:), ones(length(Thetas_simul),1)];



	;tmcCreateMagicColon(reg[107]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+428]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[108],Thetas_simul,1,reg[107]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+428]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+432]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcScalar(reg[109],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[110],reg[108],reg[109]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+436]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+432]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+440]
	push	ecx
	call _tmcPowerScalar
	add	esp,12



	;tmcCreateMagicColon(reg[112]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+448]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[113],Thetas_simul,1,reg[112]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+448]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+452]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;//CALL function
	;tmcReallocRegister(reg[115]);
	;tmclength(1,1, reg[115], Thetas_simul);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+460]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+460]
	push	ecx
	push	1
	push	1
	call _tmclength
	add	esp,16

	;tmcScalar(reg[116],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+464]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[117]);
	;tmcones(1,2, reg[117], reg[115], reg[116]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+468]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+464]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+460]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+468]
	push	ecx
	push	2
	push	1
	call _tmcones
	add	esp,20

;tmcCollectColumns(reg[118],3,reg[110],reg[113],reg[117]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+468]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+452]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+440]
	push	ecx
	push	3
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+472]
	push	ecx
	call _tmcCollectColumns
	add	esp,20

;tmcCollectRows(reg[119],1,reg[118]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+472]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+476]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(Ha_simul,reg[119]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+476]
	push	ecx
	mov	eax, DWORD PTR [ebp+-72]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 30

	;// % Lines 31--32:
	;//

	;//    Iq_simul=Ha_simul*thta;





	;tmcMul(reg[123],Ha_simul,thta);
	mov	eax, DWORD PTR [ebp+-64]
	push	eax
	mov	eax, DWORD PTR [ebp+-72]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+492]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(Iq_simul,reg[123]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+492]
	push	ecx
	mov	eax, DWORD PTR [ebp+-76]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 32

	;// % Lines 33--35:
	;//%     figure(1000);

	;//%      plot(Thetas,Iq_ave,'r.-',Thetas_simul,Iq_simul,'b');grid on;

	;//     [Y,I]=min(Iq_simul);



	;//CALL function
	;tmcReallocRegister(reg[126]);
	;tmcReallocRegister(reg[127]);
	;tmcmin(2,1, reg[126], reg[127], Iq_simul,NULL,NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+504]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+508]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	push	0
	mov	eax, DWORD PTR [ebp+-76]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+508]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+504]
	push	ecx
	push	1
	push	2
	call _tmcmin
	add	esp,28



	;tmcAssign(Y,reg[126]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+504]
	push	ecx
	mov	eax, DWORD PTR [ebp+-80]
	push	eax
	call _tmcAssign
	add	esp,8



	;tmcAssign(I,reg[127]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+508]
	push	ecx
	mov	eax, DWORD PTR [ebp+-84]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 35

	;// % Lines 36--36:
	;//     Thetas_min_a(cnt)=Thetas_simul(I);





	;tmcGetByIndex(reg[132],Thetas_simul,1,I);
	mov	eax, DWORD PTR [ebp+-84]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	call _tmcGetByIndex
	add	esp,16





	;tmcGetRefByIndex(pRefHelper,Thetas_min_a,1,cnt);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	push	1
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcGetRefByIndex
	add	esp,16

	;tmcAssign(pRefHelper,reg[132]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+528]
	push	ecx
	mov	eax, _pRefHelper+MY_LOAD_ADDRESS
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 36

	;// % Lines 37--37:
	;//end

.label_2: ; //FOR end
;	goto label_4; //branch to FOR begin
	jmp .label_4

.label_3: ; //FOR exit
	;//statement here,line 37

	;// % Lines 38--40:
	;//

	;//

	;//NumPoles=3;

	;tmcScalar(reg[135],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+540]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(NumPoles,reg[135]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+540]
	push	ecx
	mov	eax, DWORD PTR [ebp+-88]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 40

	;// % Lines 41--41:
	;//BitsPerRev = 2^16;

	;tmcScalar(reg[137],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+548]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[138],1.600000000000000e+001);
	push	0x40300000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPower(reg[139],reg[137],reg[138]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+552]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+548]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+556]
	push	ecx
	call _tmcPower
	add	esp,12



	;tmcAssign(BitsPerRev,reg[139]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+556]
	push	ecx
	mov	eax, DWORD PTR [ebp+-92]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 41

	;// % Lines 42--43:
	;//

	;//EangleCorrRes = 2^16;

	;tmcScalar(reg[141],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[142],1.600000000000000e+001);
	push	0x40300000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+568]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPower(reg[143],reg[141],reg[142]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+568]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+564]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+572]
	push	ecx
	call _tmcPower
	add	esp,12



	;tmcAssign(EangleCorrRes,reg[143]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+572]
	push	ecx
	mov	eax, DWORD PTR [ebp+-96]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 43

	;// % Lines 44--45:
	;//

	;// Thetas_min = [3200,3600,4800,5400,6700];

	;tmcScalar(reg[145],3.200000000000000e+003);
	push	0x40a90000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+580]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[146],3.600000000000000e+003);
	push	0x40ac2000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[147],4.800000000000000e+003);
	push	0x40b2c000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+588]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[148],5.400000000000000e+003);
	push	0x40b51800
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[149],6.700000000000000e+003);
	push	0x40ba2c00
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+596]
	push	ecx
	call _tmcScalar
	add	esp,12

;tmcCollectColumns(reg[150],5,reg[145],reg[146],reg[147],reg[148],reg[149]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+596]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+592]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+588]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+584]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+580]
	push	ecx
	push	5
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+600]
	push	ecx
	call _tmcCollectColumns
	add	esp,28

;tmcCollectRows(reg[151],1,reg[150]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+600]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+604]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(Thetas_min,reg[151]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+604]
	push	ecx
	mov	eax, DWORD PTR [ebp+-100]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 45

	;// % Lines 46--46:
	;// Thetas_min = Thetas_min_a;%[3200,3600,4800,5400,6700];





	;tmcAssign(Thetas_min,Thetas_min_a);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	mov	eax, DWORD PTR [ebp+-100]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 46

	;// % Lines 47--48:
	;//

	;//len = length(JV_tests);



	;//CALL function
	;tmcReallocRegister(reg[156]);
	;tmclength(1,1, reg[156], JV_tests);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+624]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+624]
	push	ecx
	push	1
	push	1
	call _tmclength
	add	esp,16



	;tmcAssign(len,reg[156]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+624]
	push	ecx
	mov	eax, DWORD PTR [ebp+-104]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 48

	;// % Lines 49--50:
	;//

	;//ElecVel       =  JV_tests / BitsPerRev * NumPoles * 360;





	;tmcDiv(reg[160],JV_tests,BitsPerRev);
	mov	eax, DWORD PTR [ebp+-92]
	push	eax
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+640]
	push	ecx
	call _tmcDiv
	add	esp,12



	;tmcMul(reg[162],reg[160],NumPoles);
	mov	eax, DWORD PTR [ebp+-88]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+640]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+648]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcScalar(reg[163],3.600000000000000e+002);
	push	0x40768000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+652]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[164],reg[162],reg[163]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+652]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+648]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+656]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(ElecVel,reg[164]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+656]
	push	ecx
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 50

	;// % Lines 51--51:
	;//AngleElecCorr =  Thetas_min / EangleCorrRes * 360;





	;tmcDiv(reg[168],Thetas_min,EangleCorrRes);
	mov	eax, DWORD PTR [ebp+-96]
	push	eax
	mov	eax, DWORD PTR [ebp+-100]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+672]
	push	ecx
	call _tmcDiv
	add	esp,12

	;tmcScalar(reg[169],3.600000000000000e+002);
	push	0x40768000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+676]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[170],reg[168],reg[169]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+676]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+672]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(AngleElecCorr,reg[170]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	mov	eax, DWORD PTR [ebp+-112]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 51

	;// % Lines 52--53:
	;//

	;//H = [ElecVel(:),ones(len,1)];



	;tmcCreateMagicColon(reg[173]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+692]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[174],ElecVel,1,reg[173]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+692]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+696]
	push	ecx
	call _tmcGetByIndex
	add	esp,16



	;tmcScalar(reg[176],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+704]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[177]);
	;tmcones(1,2, reg[177], len, reg[176]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+708]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+704]
	push	ecx
	mov	eax, DWORD PTR [ebp+-104]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+708]
	push	ecx
	push	2
	push	1
	call _tmcones
	add	esp,20

;tmcCollectColumns(reg[178],2,reg[174],reg[177]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+708]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+696]
	push	ecx
	push	2
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+712]
	push	ecx
	call _tmcCollectColumns
	add	esp,16

;tmcCollectRows(reg[179],1,reg[178]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+712]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+716]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcAssign(H,reg[179]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+716]
	push	ecx
	mov	eax, DWORD PTR [ebp+-116]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 53

	;// % Lines 54--54:
	;//tht = inv(H'*H)*(H'*AngleElecCorr(:)); % AngleElecCorr = ElecVel*tht(1) + tht(2)



	;tmcTranspose(reg[182],H);
	mov	eax, DWORD PTR [ebp+-116]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+728]
	push	ecx
	call _tmcTranspose
	add	esp,8



	;tmcMul(reg[184],reg[182],H);
	mov	eax, DWORD PTR [ebp+-116]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+728]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+736]
	push	ecx
	call _tmcMul
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[185]);
	;tmcinv(1,1, reg[185], reg[184]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+740]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+736]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+740]
	push	ecx
	push	1
	push	1
	call _tmcinv
	add	esp,16



	;tmcTranspose(reg[187],H);
	mov	eax, DWORD PTR [ebp+-116]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+748]
	push	ecx
	call _tmcTranspose
	add	esp,8



	;tmcCreateMagicColon(reg[189]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+756]
	push	ecx
	call _tmcCreateMagicColon
	add	esp,4

	;tmcGetByIndex(reg[190],AngleElecCorr,1,reg[189]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+756]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+-112]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+760]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcMul(reg[191],reg[187],reg[190]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+760]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+748]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+764]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcMul(reg[192],reg[185],reg[191]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+764]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+740]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+768]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(tht,reg[192]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+768]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 54

	;// % Lines 55--56:
	;//

	;//figure(50);

	;tmcScalar(reg[194],5.000000000000000e+001);
	push	0x40490000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+776]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[195]);
	;tmcfigure(0,1, reg[195], reg[194]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+780]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+776]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+780]
	push	ecx
	push	1
	push	0
	call _tmcfigure
	add	esp,16

	;//statement here,line 56

	;// % Lines 57--57:
	;//plot(ElecVel,AngleElecCorr,'r.-',[0,ElecVel],[0,ElecVel]*tht(1)+tht(2),'b');grid on;





;tmcCreateString(reg[198],"r.-");
	mov	eax, .LC$6+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+792]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;tmcScalar(reg[199],0.000000000000000e+000);
	push	0x0
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+796]
	push	ecx
	call _tmcScalar
	add	esp,12



;tmcCollectColumns(reg[201],2,reg[199],ElecVel);
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+796]
	push	ecx
	push	2
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+804]
	push	ecx
	call _tmcCollectColumns
	add	esp,16

;tmcCollectRows(reg[202],1,reg[201]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+804]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+808]
	push	ecx
	call _tmcCollectRows
	add	esp,12

	;tmcScalar(reg[203],0.000000000000000e+000);
	push	0x0
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+812]
	push	ecx
	call _tmcScalar
	add	esp,12



;tmcCollectColumns(reg[205],2,reg[203],ElecVel);
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+812]
	push	ecx
	push	2
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+820]
	push	ecx
	call _tmcCollectColumns
	add	esp,16

;tmcCollectRows(reg[206],1,reg[205]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+820]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+824]
	push	ecx
	call _tmcCollectRows
	add	esp,12



	;tmcScalar(reg[208],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+832]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetByIndex(reg[209],tht,1,reg[208]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+832]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+836]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcMul(reg[210],reg[206],reg[209]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+836]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+824]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+840]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcScalar(reg[212],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+848]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetByIndex(reg[213],tht,1,reg[212]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+848]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+852]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcAdd(reg[214],reg[210],reg[213]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+852]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+840]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+856]
	push	ecx
	call _tmcAdd
	add	esp,12

;tmcCreateString(reg[215],"b");
	mov	eax, .LC$7+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+860]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[216]);
	;tmcplot(0,6, reg[216], ElecVel, AngleElecCorr, reg[198], reg[202], reg[214], reg[215]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+864]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+860]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+856]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+808]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+792]
	push	ecx
	mov	eax, DWORD PTR [ebp+-112]
	push	eax
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+864]
	push	ecx
	push	6
	push	0
	call _tmcplot
	add	esp,36

	;//statement here,line 57

;tmcCreateString(reg[217],"on");
	mov	eax, .LC$8+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+868]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[218]);
	;tmcgrid(0,1, reg[218], reg[217]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+872]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+868]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+872]
	push	ecx
	push	1
	push	0
	call _tmcgrid
	add	esp,16

	;//statement here,line 57

	;// % Lines 58--59:
	;//

	;//AbsOffsetCorr = tht(2)/360 / NumPoles * BitsPerRev;



	;tmcScalar(reg[220],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+880]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetByIndex(reg[221],tht,1,reg[220]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+880]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+884]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcScalar(reg[222],3.600000000000000e+002);
	push	0x40768000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+888]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcDiv(reg[223],reg[221],reg[222]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+888]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+884]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+892]
	push	ecx
	call _tmcDiv
	add	esp,12



	;tmcDiv(reg[225],reg[223],NumPoles);
	mov	eax, DWORD PTR [ebp+-88]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+892]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+900]
	push	ecx
	call _tmcDiv
	add	esp,12



	;tmcMul(reg[227],reg[225],BitsPerRev);
	mov	eax, DWORD PTR [ebp+-92]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+900]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+908]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(AbsOffsetCorr,reg[227]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+908]
	push	ecx
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 59

	;// % Lines 60--60:
	;//AdvUsecCorr   = tht(1)*1e6;



	;tmcScalar(reg[230],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcGetByIndex(reg[231],tht,1,reg[230]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+920]
	push	ecx
	push	1
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+924]
	push	ecx
	call _tmcGetByIndex
	add	esp,16

	;tmcScalar(reg[232],1.000000000000000e+006);
	push	0x412e8480
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[233],reg[231],reg[232]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+924]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+932]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(AdvUsecCorr,reg[233]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+932]
	push	ecx
	mov	eax, DWORD PTR [ebp+24]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 60

	;// % Lines 61--64:
	;//

	;//% tht = FitLine(JV_tests,Thetas_min,1);

	;//

	;//w = logspace(-1,3,1000);

	;tmcScalar(reg[235],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+940]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcNeg(reg[236],reg[235]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+940]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+944]
	push	ecx
	call _tmcNeg
	add	esp,8

	;tmcScalar(reg[237],3.000000000000000e+000);
	push	0x40080000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+948]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[238],1.000000000000000e+003);
	push	0x408f4000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[239]);
	;tmclogspace(1,3, reg[239], reg[236], reg[237], reg[238]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+956]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+952]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+948]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+944]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+956]
	push	ecx
	push	3
	push	1
	call _tmclogspace
	add	esp,24



	;tmcAssign(w,reg[239]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+956]
	push	ecx
	mov	eax, DWORD PTR [ebp+-120]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 64

	;// % Lines 65--65:
	;//s = j*w;

	;//CALL function
	;tmcReallocRegister(reg[241]);
	;tmcj(1,0, reg[241]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+964]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+964]
	push	ecx
	push	0
	push	1
	call _tmcj
	add	esp,12



	;tmcMul(reg[243],reg[241],w);
	mov	eax, DWORD PTR [ebp+-120]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+964]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+972]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(s,reg[243]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+972]
	push	ecx
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 65

	;// % Lines 66--66:
	;//w0=120;w1=250;d0=0.07;d1=0.55;

	;tmcScalar(reg[245],1.200000000000000e+002);
	push	0x405e0000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+980]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(w0,reg[245]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+980]
	push	ecx
	mov	eax, DWORD PTR [ebp+-128]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 66

	;tmcScalar(reg[247],2.500000000000000e+002);
	push	0x406f4000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+988]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(w1,reg[247]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+988]
	push	ecx
	mov	eax, DWORD PTR [ebp+-132]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 66

	;tmcScalar(reg[249],7.000000000000001e-002);
	push	0x3fb1eb85
	push	0x1eb851ec
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+996]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(d0,reg[249]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+996]
	push	ecx
	mov	eax, DWORD PTR [ebp+-136]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 66

	;tmcScalar(reg[251],5.500000000000000e-001);
	push	0x3fe19999
	push	0x9999999a
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1004]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcAssign(d1,reg[251]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1004]
	push	ecx
	mov	eax, DWORD PTR [ebp+-140]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 66

	;// % Lines 67--67:
	;//P = (s.^2 + 2*d0*w0*s+w0^2)./(s.^2 + 2*d1*w1*s+w1^2)*(w1/w0)^2 ./ (s.^2) ./(s+10000)*10000;



	;tmcScalar(reg[254],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1016]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[255],s,reg[254]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1016]
	push	ecx
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1020]
	push	ecx
	call _tmcPowerScalar
	add	esp,12

	;tmcScalar(reg[256],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1024]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcMul(reg[258],reg[256],d0);
	mov	eax, DWORD PTR [ebp+-136]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1024]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1032]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcMul(reg[260],reg[258],w0);
	mov	eax, DWORD PTR [ebp+-128]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1032]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1040]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcMul(reg[262],reg[260],s);
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1040]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1048]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcAdd(reg[263],reg[255],reg[262]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1048]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1020]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1052]
	push	ecx
	call _tmcAdd
	add	esp,12



	;tmcScalar(reg[265],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1060]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPower(reg[266],w0,reg[265]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1060]
	push	ecx
	mov	eax, DWORD PTR [ebp+-128]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1064]
	push	ecx
	call _tmcPower
	add	esp,12

	;tmcAdd(reg[267],reg[263],reg[266]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1064]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1052]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1068]
	push	ecx
	call _tmcAdd
	add	esp,12



	;tmcScalar(reg[269],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1076]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[270],s,reg[269]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1076]
	push	ecx
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1080]
	push	ecx
	call _tmcPowerScalar
	add	esp,12

	;tmcScalar(reg[271],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1084]
	push	ecx
	call _tmcScalar
	add	esp,12



	;tmcMul(reg[273],reg[271],d1);
	mov	eax, DWORD PTR [ebp+-140]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1084]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1092]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcMul(reg[275],reg[273],w1);
	mov	eax, DWORD PTR [ebp+-132]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1092]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1100]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcMul(reg[277],reg[275],s);
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1100]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1108]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcAdd(reg[278],reg[270],reg[277]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1108]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1080]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1112]
	push	ecx
	call _tmcAdd
	add	esp,12



	;tmcScalar(reg[280],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPower(reg[281],w1,reg[280]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	mov	eax, DWORD PTR [ebp+-132]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1124]
	push	ecx
	call _tmcPower
	add	esp,12

	;tmcAdd(reg[282],reg[278],reg[281]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1124]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1112]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1128]
	push	ecx
	call _tmcAdd
	add	esp,12

	;tmcDivScalar(reg[283],reg[267],reg[282]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1128]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1068]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1132]
	push	ecx
	call _tmcDivScalar
	add	esp,12





	;tmcDiv(reg[286],w1,w0);
	mov	eax, DWORD PTR [ebp+-128]
	push	eax
	mov	eax, DWORD PTR [ebp+-132]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1144]
	push	ecx
	call _tmcDiv
	add	esp,12

	;tmcScalar(reg[287],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1148]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPower(reg[288],reg[286],reg[287]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1148]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1144]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1152]
	push	ecx
	call _tmcPower
	add	esp,12

	;tmcMul(reg[289],reg[283],reg[288]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1152]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1132]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1156]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcScalar(reg[291],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1164]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcPowerScalar(reg[292],s,reg[291]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1164]
	push	ecx
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1168]
	push	ecx
	call _tmcPowerScalar
	add	esp,12

	;tmcDivScalar(reg[293],reg[289],reg[292]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1168]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1156]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1172]
	push	ecx
	call _tmcDivScalar
	add	esp,12



	;tmcScalar(reg[295],1.000000000000000e+004);
	push	0x40c38800
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1180]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcAdd(reg[296],s,reg[295]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1180]
	push	ecx
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1184]
	push	ecx
	call _tmcAdd
	add	esp,12

	;tmcDivScalar(reg[297],reg[293],reg[296]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1184]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1172]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1188]
	push	ecx
	call _tmcDivScalar
	add	esp,12

	;tmcScalar(reg[298],1.000000000000000e+004);
	push	0x40c38800
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1192]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[299],reg[297],reg[298]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1192]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1188]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1196]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(P,reg[299]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1196]
	push	ecx
	mov	eax, DWORD PTR [ebp+-144]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 67

	;// % Lines 68--68:
	;//ph=unwrap(angle(P))/pi*180 -360;



	;//CALL function
	;tmcReallocRegister(reg[302]);
	;tmcangle(1,1, reg[302], P);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1208]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-144]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1208]
	push	ecx
	push	1
	push	1
	call _tmcangle
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[303]);
	;tmcunwrap(1,1, reg[303], reg[302],NULL);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1212]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	push	0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1208]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1212]
	push	ecx
	push	1
	push	1
	call _tmcunwrap
	add	esp,20

	;//CALL function
	;tmcReallocRegister(reg[304]);
	;tmcpi(1,0, reg[304]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1216]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1216]
	push	ecx
	push	0
	push	1
	call _tmcpi
	add	esp,12

	;tmcDiv(reg[305],reg[303],reg[304]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1216]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1212]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1220]
	push	ecx
	call _tmcDiv
	add	esp,12

	;tmcScalar(reg[306],1.800000000000000e+002);
	push	0x40668000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1224]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcMul(reg[307],reg[305],reg[306]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1224]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1220]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1228]
	push	ecx
	call _tmcMul
	add	esp,12

	;tmcScalar(reg[308],3.600000000000000e+002);
	push	0x40768000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1232]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcSub(reg[309],reg[307],reg[308]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1232]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1228]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1236]
	push	ecx
	call _tmcSub
	add	esp,12



	;tmcAssign(ph,reg[309]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1236]
	push	ecx
	mov	eax, DWORD PTR [ebp+-148]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 68

	;// % Lines 69--69:
	;//Mag=20*log10(abs(P));

	;tmcScalar(reg[311],2.000000000000000e+001);
	push	0x40340000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1244]
	push	ecx
	call _tmcScalar
	add	esp,12



	;//CALL function
	;tmcReallocRegister(reg[313]);
	;tmcabs(1,1, reg[313], P);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1252]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+-144]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1252]
	push	ecx
	push	1
	push	1
	call _tmcabs
	add	esp,16

	;//CALL function
	;tmcReallocRegister(reg[314]);
	;tmclog10(1,1, reg[314], reg[313]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1256]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1252]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1256]
	push	ecx
	push	1
	push	1
	call _tmclog10
	add	esp,16

	;tmcMul(reg[315],reg[311],reg[314]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1256]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1244]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1260]
	push	ecx
	call _tmcMul
	add	esp,12



	;tmcAssign(Mag,reg[315]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1260]
	push	ecx
	mov	eax, DWORD PTR [ebp+-152]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 69

	;// % Lines 70--70:
	;//figure(123);

	;tmcScalar(reg[317],1.230000000000000e+002);
	push	0x405ec000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1268]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[318]);
	;tmcfigure(0,1, reg[318], reg[317]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1272]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1268]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1272]
	push	ecx
	push	1
	push	0
	call _tmcfigure
	add	esp,16

	;//statement here,line 70

	;// % Lines 71--71:
	;//subplot(2,1,1);

	;tmcScalar(reg[319],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1276]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[320],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1280]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[321],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1284]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[322]);
	;tmcsubplot(0,3, reg[322], reg[319], reg[320], reg[321]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1288]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1284]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1280]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1276]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1288]
	push	ecx
	push	3
	push	0
	call _tmcsubplot
	add	esp,24

	;//statement here,line 71

	;// % Lines 72--72:
	;//plot(w,Mag,'b');





;tmcCreateString(reg[325],"b");
	mov	eax, .LC$9+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1300]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[326]);
	;tmcplot(0,3, reg[326], w, Mag, reg[325]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1304]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1300]
	push	ecx
	mov	eax, DWORD PTR [ebp+-152]
	push	eax
	mov	eax, DWORD PTR [ebp+-120]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1304]
	push	ecx
	push	3
	push	0
	call _tmcplot
	add	esp,24

	;//statement here,line 72

	;// % Lines 73--73:
	;//subplot(2,1,2);

	;tmcScalar(reg[327],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[328],1.000000000000000e+000);
	push	0x3ff00000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1312]
	push	ecx
	call _tmcScalar
	add	esp,12

	;tmcScalar(reg[329],2.000000000000000e+000);
	push	0x40000000
	push	0x0
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1316]
	push	ecx
	call _tmcScalar
	add	esp,12

	;//CALL function
	;tmcReallocRegister(reg[330]);
	;tmcsubplot(0,3, reg[330], reg[327], reg[328], reg[329]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1320]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1316]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1312]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1308]
	push	ecx
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1320]
	push	ecx
	push	3
	push	0
	call _tmcsubplot
	add	esp,24

	;//statement here,line 73

	;// % Lines 74--74:
	;//plot(w,ph,'b');





;tmcCreateString(reg[333],"b");
	mov	eax, .LC$10+MY_LOAD_ADDRESS
	push eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1332]
	push	ecx
	call _tmcCreateString
	add	esp,8

	;//CALL function
	;tmcReallocRegister(reg[334]);
	;tmcplot(0,3, reg[334], w, ph, reg[333]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1336]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1332]
	push	ecx
	mov	eax, DWORD PTR [ebp+-148]
	push	eax
	mov	eax, DWORD PTR [ebp+-120]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+1336]
	push	ecx
	push	3
	push	0
	call _tmcplot
	add	esp,24

	;//statement here,line 74

	;// % Lines 75--83:
	;//% 

	;//% figure(124);

	;//% subplot(2,1,1);

	;//% plot(log10(w),Mag,'b');

	;//% subplot(2,1,2);

	;//% plot(log10(w),ph,'b');

	;//

	;//

.label_1: ; //end Function
	;FINALLY
	;tmcFreeLocalVar(Mag);
	mov	eax, DWORD PTR [ebp+-152]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(ph);
	mov	eax, DWORD PTR [ebp+-148]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(P);
	mov	eax, DWORD PTR [ebp+-144]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(d1);
	mov	eax, DWORD PTR [ebp+-140]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(d0);
	mov	eax, DWORD PTR [ebp+-136]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(w1);
	mov	eax, DWORD PTR [ebp+-132]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(w0);
	mov	eax, DWORD PTR [ebp+-128]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(s);
	mov	eax, DWORD PTR [ebp+-124]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(w);
	mov	eax, DWORD PTR [ebp+-120]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(H);
	mov	eax, DWORD PTR [ebp+-116]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(AngleElecCorr);
	mov	eax, DWORD PTR [ebp+-112]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(ElecVel);
	mov	eax, DWORD PTR [ebp+-108]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(len);
	mov	eax, DWORD PTR [ebp+-104]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Thetas_min);
	mov	eax, DWORD PTR [ebp+-100]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(EangleCorrRes);
	mov	eax, DWORD PTR [ebp+-96]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(BitsPerRev);
	mov	eax, DWORD PTR [ebp+-92]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(NumPoles);
	mov	eax, DWORD PTR [ebp+-88]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(I);
	mov	eax, DWORD PTR [ebp+-84]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Y);
	mov	eax, DWORD PTR [ebp+-80]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Iq_simul);
	mov	eax, DWORD PTR [ebp+-76]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Ha_simul);
	mov	eax, DWORD PTR [ebp+-72]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Thetas_simul);
	mov	eax, DWORD PTR [ebp+-68]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(thta);
	mov	eax, DWORD PTR [ebp+-64]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Ha);
	mov	eax, DWORD PTR [ebp+-60]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(lena);
	mov	eax, DWORD PTR [ebp+-56]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(I2);
	mov	eax, DWORD PTR [ebp+-52]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Y2);
	mov	eax, DWORD PTR [ebp+-48]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Y1);
	mov	eax, DWORD PTR [ebp+-44]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Thetas);
	mov	eax, DWORD PTR [ebp+-40]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Iq_ave);
	mov	eax, DWORD PTR [ebp+-36]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(www);
	mov	eax, DWORD PTR [ebp+-32]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(cnt);
	mov	eax, DWORD PTR [ebp+-28]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(Thetas_min_a);
	mov	eax, DWORD PTR [ebp+-24]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(FileNames);
	mov	eax, DWORD PTR [ebp+-20]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeLocalVar(JV_tests);
	mov	eax, DWORD PTR [ebp+-16]
	push	eax
	call _tmcFreeLocalVar
	add	esp,4
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcbtlCalcCommut
.LC$1:	 DB 'BtlMotor1_comm_jv750000_13p6V.mat', 0x0
.LC$2:	 DB 'BtlMotor1_comm_jv1000000_13p6V.mat', 0x0
.LC$3:	 DB 'BtlMotor1_comm_jv1500000_13p6V.mat', 0x0
.LC$4:	 DB 'BtlMotor1_comm_jv2000000_13p6V.mat', 0x0
.LC$5:	 DB 'BtlMotor1_comm_jv3000000_6p9V.mat', 0x0
.LC$6:	 DB 'r.-', 0x0
.LC$7:	 DB 'b', 0x0
.LC$8:	 DB 'on', 0x0
.LC$9:	 DB 'b', 0x0
.LC$10:	 DB 'b', 0x0

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 83

	;// % Lines 84--84:
	 ;File: .\OutS3\CheckVar1.c generated by TMC Converter(C)2009-2016,Israel
	;// % Lines 1--3:
	;//function d=CheckVar1(p,r)

	;//

	;//d = polyval(p,r);


_tmcCheckVar1:
	push ebp
	mov ebp,esp
	sub esp,512
	push ebx
	push esi
	push edi
	lea	edi,DWORD PTR [ebp-512]
	;void tmcCheckVar1(int nargout, int nargin,tmsMatrix *d
	;,tmsMatrix *p,tmsMatrix *r	;) {
	;tmsMatrix **reg=tmcCreateRegFrame(5);
	push	5
	call _tmcCreateRegFrame
	add	esp,4
	mov	DWORD PTR [ebp-8],eax

	;TRY
	;




	;//CALL function
	;tmcReallocRegister(reg[3]);
	;tmcpolyval(1,2, reg[3], p, r);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call _tmcReallocRegister
	add	esp,4
	mov	eax, DWORD PTR [ebp+24]
	push	eax
	mov	eax, DWORD PTR [ebp+20]
	push	eax
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	2
	push	1
	call _tmcpolyval
	add	esp,20



	;tmcAssign(d,reg[3]);
	mov	eax, DWORD PTR [ebp-8]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call _tmcAssign
	add	esp,8

	;//statement here,line 3

	;// % Lines 4--5:
	;//

.label_1: ; //end Function
	;FINALLY
	;tmcFreeRegFrame(reg);
	mov	eax, DWORD PTR [ebp+-8]
	push	eax
	call _tmcFreeRegFrame
	add	esp,4

	;
	;ENDFINALLY


	pop edi
	pop esi
	pop ebx
	add esp,512
	mov esp,ebp
	pop ebp
	ret
	;end	 _tmcCheckVar1

	;//FUNCTION DEFINITION ENDED
	;//statement here,line 5

	;// % Lines 6--6:
	%include "PE_tail.inc"
