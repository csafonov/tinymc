// Shmuel Safonov (Copyright 2009-2015) All rights reserved.
// Caller to TMC generated application
//#include "tmc_lib.h"
#include "tmc.h"

#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#define	_O_RDONLY O_RDONLY
#define _O_BINARY 0  //O_BINARY
#define  _O_RDWR  O_RDWR
#define  _O_CREAT O_CREAT
#define	 _O_TRUNC O_TRUNC
#define	 _S_IREAD (S_IRUSR|S_IROTH)		// see sys/stat.h.
#define	 _S_IWRITE (S_IWUSR|S_IWOTH)

#include <stdio.h>

//void tmcTestO(int nargout, int nargin,tmsMatrix *Y1,tmsMatrix *Y2,tmsMatrix *x__input__tmc,tmsMatrix *n);

extern const struct CInit_funcs_table Init_funcs_table ;

void InitSIMOLib();
void UninitSIMOLib();

void tmcTestO(int nargout, int nargin,tmsMatrix *y,tmsMatrix *x);
void tmcTestTuner(int nargout, int nargin,tmsMatrix *plants,tmsMatrix *Fw,
		tmsMatrix *ki,tmsMatrix *kp,tmsMatrix *kd,tmsMatrix *polew,
		tmsMatrix *x);
////////////
void _tmcGetSubDimMatD2(tmsMatrix *pMat,long offs,const tmsMatrix *x);



///////////

extern void storePIDData(int _numFreqs, int  _numPlants,  int _nCrl, int  _typeCrl, double* rData, double* iData,
		double* Fw,	double* ki,double* kp,double* kd,double* polew);


void main_designer(double *err,double *r1,double *i1,double a)
{
int fh;
char sBuf[]="/mnt/sdcard/download/costia.txt";
//char sBuf[]="costia.txt";
char InBuf[1024];
int kk;
long M,N,nCrl;


tmsMatrix *x;
tmsMatrix *plants;
tmsMatrix *Fw,*ki,*kp,*kd,*polew;

tmcInitLib(&Init_funcs_table);

		x = tmcNewMatrix();
		plants = tmcNewMatrix();
		Fw = tmcNewMatrix();
		ki = tmcNewMatrix();
		kp = tmcNewMatrix();
		kd = tmcNewMatrix();
		polew = tmcNewMatrix();


_tmcCreateMatrix(x,1,4,0);
x->m_rData[0] = 1;
x->m_rData[1] = a;
x->m_rData[2] = a*a;
x->m_rData[3] = 1;



//InitSIMOLib();

fh = open(sBuf,_O_RDWR  | _O_CREAT | _O_TRUNC | _O_BINARY, _S_IREAD | _S_IWRITE );
write(fh,"HOH",3);
close(fh);

fh = open(sBuf,_O_RDONLY | _O_BINARY);
read( fh, InBuf, 3 ) ;
*err = InBuf[0];


// tmcTestOA(1,1,y,x);
//x[0]: 1: calc, 7: only get from Out.mat
x->m_rData[0] = 7;
tmcTestTuner(6, 1,plants,Fw,ki,kp,kd,polew,x);



 M = _tmcGetM(plants);
 N = _tmcGetN(plants);
 nCrl = _tmcGetM(ki)*_tmcGetN(ki);

 storePIDData(N, M,  nCrl, 1, plants->m_rData, plants->m_iData, Fw->m_rData,
		 ki->m_rData,kp->m_rData,kd->m_rData,polew->m_rData);


//UninitSIMOLib();

	tmcFreeLocalVar(Fw);
	tmcFreeLocalVar(ki);
	tmcFreeLocalVar(kp);
	tmcFreeLocalVar(kd);
	tmcFreeLocalVar(polew);

	tmcFreeLocalVar(plants);
	tmcFreeLocalVar(x);

tmcFreeLib();

}



//void tmcTestO(int nargout, int nargin,tmsMatrix *y,tmsMatrix *x)
//{
//
//}
///////////////////////
void tmcdbgPushStackVar(const char *fncname,short nVars,tmsMatrix* var1,const char *varname1,...)
{
}
void tmcdbgPopStackVar(short nVars)
{
}

void   MYFREE( void *memblock )
{
	free(memblock);
}

/// This function is platform-specific
char bufferWaitBar[2048];
void javaDispString(char *bufferWaitBar);
void tmcwaitbar(long nout, long ninput, tmsMatrix *hand, tmsMatrix *frac, tmsMatrix *title, tmsMatrix *pt1, tmsMatrix *pv1, tmsMatrix *pt2, tmsMatrix *pv2)
{
	//	extern __int64 g_MemCnt;
	//	extern __int64 g_MemN;
	//	extern __int64 g_MemUsed;

	if (nout>0)
		_tmcCreateMatrix(hand, 1, 1, 0);

	if (ninput>1)
		//sfprintf(bufferWaitBar, "waitbar: %f, Mem=%I64d,N=%I64d,MU=%I64d \n", frac->m_rData[0], g_MemCnt, g_MemN, g_MemUsed);
		sprintf(bufferWaitBar, "PLEASE WAIT,progress: %f \n", frac->m_rData[0]);
	javaDispString(bufferWaitBar);
}
